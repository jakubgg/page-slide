module.exports = function (grunt) {
    require('load-grunt-tasks')(grunt);

    grunt.initConfig({
        pkg: grunt.file.readJSON('package.json'),

        modernizr: {
            dist: {
                // [REQUIRED] Path to the build you're using for development.
                "devFile"            : "bower_components/modernizr/modernizr.js",

                // Path to save out the built file.
                "outputFile"         : "bower_components/modernizr/modernizr-custom.min.js",

                // Based on default settings on http://modernizr.com/download/
                "extra"              : {
                    "shiv"      : false,
                    "printshiv" : false,
                    "load"      : false,
                    "mq"        : false,
                    "cssclasses": true
                },

                // Based on default settings on http://modernizr.com/download/
                "extensibility"      : {
                    "addtest"       : false,
                    "prefixed"      : false,
                    "teststyles"    : false,
                    "testprops"     : false,
                    "testallprops"  : false,
                    "hasevents"     : false,
                    "prefixes"      : false,
                    "domprefixes"   : false,
                    "cssclassprefix": ""
                },

                // By default, source is uglified before saving
                "uglify"             : true,

                // Define any tests you want to implicitly include.
                "tests"              : ['cssanimations'],

                // By default, this task will crawl your project for references to Modernizr tests.
                // Set to false to disable.
                "parseFiles"         : false,

                // When parseFiles = true, this task will crawl all *.js, *.css, *.scss and *.sass files,
                // except files that are in node_modules/.
                // You can override this by defining a "files" array below.
                // "files" : {
                // "src": []
                // },

                // This handler will be passed an array of all the test names passed to the Modernizr API, and will run after the API call has returned
                // "handler": function (tests) {},

                // When parseFiles = true, matchCommunityTests = true will attempt to
                // match user-contributed tests.
                "matchCommunityTests": false,

                // Have custom Modernizr tests? Add paths to their location here.
                "customTests"        : []
            }
        },

        concat: {
            css: {
                src : [
                    'bower_components/normalize-css/normalize.css',
                    'bower_components/animate.css/animate.min.css', //generated by subgrunt task
                    'src/css/nst.css'
                ],
                dest: 'web/css/nst.css'
            },
            js : {
                options: {
                    separator: ';\n'
                },
                src    : [
                    'bower_components/modernizr/modernizr-custom.min.js',
                    'bower_components/jquery/dist/jquery.min.js',
                    'src/js/jquery.smoothState.custom.js'
                ],
                dest   : 'web/js/build.js'
            }
        },

        copy: {
            dev  : {
                src : 'src/js/nst.js',
                dest: 'web/js/nst.js'
            },
            setup: {
                files: [
                    {
                        src : 'cfg/bower/animate-config.json',
                        dest: 'bower_components/animate.css/animate-config.json'
                    },
                    {
                        src : 'bower_components/history.js/scripts/bundled/html5/jquery.history.js',
                        dest: 'web/js/history.js'
                    },
                    {
                        src : 'bower_components/headjs/dist/1.0.0/head.load.min.js',
                        dest: 'web/js/head.js'
                    }
                ]
            }
        },

        uglify: {
            dist: {
                files: [
                    {'web/js/build.js': 'web/js/build.js'},
                    {'web/js/head.js': 'web/js/head.js'},
                    {'web/js/nst.js': 'web/js/nst.js'}
                ]
            }
        },

        subgrunt: {
            animateCss: [
                'bower_components/animate.css'
            ]
        },
        cssmin  : {
            options: {
                shorthandCompacting: false,
                roundingPrecision  : -1
            },
            target : {
                files: {
                    'web/css/nst.css': ['web/css/nst.css']
                }
            }
        },

        clean: ['web/js/nst.js', 'web/js/build.js', 'web/css/nst.css'],

        watch: {
            scripts: {
                files  : ['src/js/*.js'],
                tasks  : ['default'],
                options: {
                    spawn  : false,
                    atBegin: true
                }
            }
        }
    });

    grunt.registerTask('setup', ['modernizr', 'copy:setup', 'copy:dev', 'subgrunt', 'concat:css', 'concat:js']);
    grunt.registerTask('default', ['clean', 'concat:css', 'concat:js', 'copy:dev']);
    grunt.registerTask('production', ['setup', 'uglify', 'cssmin']);
};
